<?php
require_once 'includes/class-ldap-auth-response.php';
require_once 'includes/customer_ldap_config.php';

/**
 * Implements hook_menu().
 */

drupal_add_css( drupal_get_path('module', 'ldap_auth'). '/css/bootstrap.min.css' , array('group' => CSS_DEFAULT, 'every_page' => FALSE));
drupal_add_css( drupal_get_path('module', 'ldap_auth'). '/css/style_settings.css' , array('group' => CSS_DEFAULT, 'every_page' => FALSE));

function ldap_auth_menu() {

    $items['admin/config/people/ldap_auth'] = array(
        'title' => 'miniOrange LDAP/Active Directory Login Configuration',
        'description' => 'miniOrange LDAP/Active Directory Login Configuration',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ldap_auth_ldap_config'),
        'access arguments' => array('administer site configuration'),
        'file' => 'ldap_auth_ldap_config.inc',
    );

    $items['admin/config/people/ldap_auth/customer_setup'] = array(
        'title' => ' Register/Login ',
        'type' => MENU_LOCAL_TASK,
        'weight' => -2,
        'access arguments' => array('administer site configuration'),
        'page arguments' => array('ldap_auth_customer_setup'),
        'file' => 'ldap_auth_customer_setup.inc',
    );

    $items['admin/config/people/ldap_auth/ldap_config'] = array(
        'title' => ' LDAP Configuration ',
        'weight' => -8,
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'access arguments' => array('administer site configuration'),
        'page arguments' => array('ldap_auth_ldap_config'),
        'file' => 'ldap_auth_ldap_config.inc',
    );
    $items['admin/config/people/ldap_auth/sign_in'] = array(
        'title' => ' Signin Settings ',
        'weight' => -7,
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer site configuration'),
        'page arguments' => array('ldap_auth_signin'),
        'file' => 'ldap_auth_signin.inc',
    );
    $items['admin/config/people/ldap_auth/role_mapping'] = array(
        'title' => ' Role Mapping ',
        'weight' => -6,
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer site configuration'),
        'page arguments' => array('ldap_auth_role_mapping'),
        'file' => 'ldap_auth_role_config.inc',
    );
    $items['admin/config/people/ldap_auth/attr_mapping'] = array(
        'title' => ' Attribute Mapping ',
        'weight' => -5,
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer site configuration'),
        'page arguments' => array('ldap_auth_attr_mapping'),
        'file' => 'ldap_auth_attr_mapping.inc',
    );
    $items['admin/config/people/ldap_auth/license'] = array(
        'title' => ' Upgrade Plans ',
        'weight' => -4,
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer site configuration'),
        'page arguments' => array('ldap_auth_license'),
        'file' => 'ldap_auth_license.inc',
    );
    $items['admin/config/people/ldap_auth/support'] = array(
        'title' => ' Support & Troubleshoot ',
        'weight' => -3,
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer site configuration'),
        'page arguments' => array('ldap_auth_support'),
        'file' => 'ldap_auth_support.inc',
    );
    $items['testConfig'] = array(
        'access callback' => TRUE,
        'page callback' => 'test_mo_config',
        'type' => MENU_CALLBACK
    );
    $items['pingServer'] = array(
        'access callback' => TRUE,
        'page callback' => 'test_ldap_conn',
        'type' => MENU_CALLBACK
    );


    return $items;
}

function ldap_auth_form_alter(&$form,&$form_state,$form_id)
{
    $ntlm_login_enabled = variable_get('miniorange_ldap_enable_ntlm','');

    if(!user_is_logged_in() && ($ntlm_login_enabled == 1))
    {
        $username ='';
        if(isset($_SERVER['REMOTE_USER']))
        {
            $username = $_SERVER['REMOTE_USER'];
            //Get rid of domain name
            $username = array_pop (explode ("\\", $username));
        }
        if($username !='')
        {
            $account= user_load_by_name($username);
            if (empty($account))
            {
                $account = user_load_by_mail($username);
            }
            if($account == null)
            {
                //create user if not exists
                $default_role = 'authenticated user';
                $random_password = user_password(8);
                $result = db_select('role', 'rid')
                    ->fields('rid')
                    ->condition('name', $default_role,'=')
                    ->execute()
                    ->fetchAssoc();
                $dc[$result['rid']]=$default_role;
                $new_user = array(
                    'name' => $username,
                    'mail' => $email,
                    'pass' => $random_password,
                    'status' => 1,
                    'roles' =>  $dc
                );
                $account = user_save(NULL, $new_user);
            }
            $redirect_url ='';
            flood_clear_event($account->name);
            $user = user_load($account->uid);
            global $base_url;
            $edit = array();
            $edit['redirect'] = $base_url;
            $account = json_decode(json_encode($account), True);
            user_login_submit(array(), $account);
            drupal_goto($edit['redirect']);
        }
    }

    if($form_id=='miniorange_ldap_ldap_config')
    {
        $form['actions']['submit']['#attributes']['class'][] = 'my-form-class';
        $form['#attributes']['class'][] = 'my-form-class';

    }
}

function ldap_auth_form_user_login_alter(&$form, $form_state) {
    $login_with_ldap = variable_get('miniorange_ldap_enable_ldap', '');
    if($login_with_ldap){
        array_unshift($form['#validate'],'custom_login_validate');
    }
}

/**
 * Implements hook_user_login_block_alter().
 */
function ldap_auth_form_user_login_block_alter(&$form, $form_state) {
    return ldap_auth_form_user_login_alter($form, $form_state);
}

function custom_login_validate()
{
    $username = $_POST['name'];
    $password = $_POST['pass'];
    $user='';
    $email='';
    MiniorangeLdapUtility::addLogger('ldap_auth', 'L1: Got control');
    $mo_ldap_config = new MiniorangeLdapConfig();

    $auth_response = ldap_login($username, $password);

    MiniorangeLdapUtility::addLogger('L2: Auth Response Status:',$auth_response->statusMessage);
    MiniorangeLdapUtility::addLogger('L3: Complete Auth Response: ',$auth_response);
    if(!empty($auth_response))
    {
        if ($auth_response->statusMessage == 'SUCCESS')
        {
            $account = user_load_by_name($username);
            MiniorangeLdapUtility::addLogger('L4: Loading account using username: ', $username);

            if (empty($account)) {
                $email = $auth_response->profileAttributesList['mail'];
                MiniorangeLdapUtility::addLogger('L5: Trying to load account in Drupal using email: ',$email);
                if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
                    $account = user_load_by_mail($email);
                }
                else {
                    form_set_error('user_login_block',t('Valid Email Address not received. Please check your email attribute mapping again.'));
                    drupal_goto();
                }
            }

            if($account == null)
            {
                form_set_error('user_login_block', t('Error: User Not Found in Drupal.You can only log in the existing Drupal users in this version of the module.
Please upgrade to either the Premium or the Enterprise version of the module in order to create unlimited new users.'));
                MiniorangeLdapUtility::addLogger('L6: Account Not Found');
                drupal_goto();
            }

            $redirect_url ='';
            flood_clear_event($account->name);
            $user = user_load($account->uid);
            MiniorangeLdapUtility::addLogger('L7: User Logged in Drupal');
            global $base_url;
            $edit = array();
            $edit['redirect'] = $base_url;
            $account = json_decode(json_encode($account), True);
            user_login_submit(array(), $account);
            drupal_goto($edit['redirect']);
        }
        else if ($auth_response->statusMessage == "LDAP_NOT_RESPONDING") {
            $uid = user_authenticate($username, $password);
            if(!$uid)
            {
                form_set_error('user_login_block', t('It looks like your LDAP is not responding. Please contact your administrator or try after some time.'));
                drupal_goto();
            }
        }
        else if ($auth_response->statusMessage =="LDAP_ERROR") {
            form_set_error('user_login_block', t('PHP LDAP extension is not installed or disabled. Please enable it.'));
            drupal_goto();
        }
        else if ($auth_response->statusMessage == "CURL_ERROR") {
            form_set_error('user_login_block', t('PHP cURL extension is not installed or disabled. Please enable it.'));
            drupal_goto();
        }
        else if ($auth_response->statusMessage == 'OPENSSL_ERROR') {
            form_set_error('user_login_block', t('PHP OpenSSL extension is not installed or disabled. Please enable it.'));
            drupal_goto();
        }
        else if ($auth_response->statusMessage == 'ERROR') {
            $uid = user_authenticate($username, $password);
            if(!$uid){
                form_set_error('user_login_block',t('Invalid Password. Please check your password and try again.'));
                drupal_goto();
            }
        }
    }
}

function test_ldap_conn()
{
    $server_name = isset($_POST['miniorange_ldap_server']) ? trim(check_plain($_POST['miniorange_ldap_server'])) : '';
    MiniorangeLdapUtility::addLogger('L101: Entered Contact LDAP Server ');
    if(empty($server_name)) {
        variable_set('miniorange_ldap_server','');
        drupal_set_message(t('Please enter a valid LDAP Server URL.'),'error');
        return;
    }

    variable_set('miniorange_ldap_server',$server_name);
    $login_with_ldap = variable_get('miniorange_ldap_enable_ldap', '');

    $ldapconn = getConnection();
    if($ldapconn)
    {
        ldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3);
        ldap_set_option($ldapconn, LDAP_OPT_REFERRALS, 0);

        $ldap_bind_dn = variable_get('miniorange_ldap_server_account_username','');
        $ldap_bind_password = variable_get('miniorange_ldap_server_account_password','');

        $bind = @ldap_bind($ldapconn, $ldap_bind_dn, $ldap_bind_password);
        $err = ldap_error($ldapconn);
        if(strtolower($err) != 'success'){
            drupal_set_message(t('There seems to be an error trying to contact your LDAP server. Please check your configurations or contact the administrator for the same.'),'error');
        }
        else{
            drupal_set_message(t("Congratulations! you were succesfully able to connect to your LDAP Server"));
        }
    }
}
function test_mo_config()
{
    $login_with_ldap = variable_get('miniorange_ldap_enable_ldap', '');
    $username = variable_get('miniorange_ldap_server_account_username');

    $password = variable_get('miniorange_ldap_server_account_password');
    $auth_response = ldap_login($username, $password);
    if(!empty($auth_response))
    {
        MiniorangeLdapUtility::addLogger('L34: auth response not empty ');
        MiniorangeLdapUtility::addLogger('L35: auth response statusMessage:  ',$auth_response->statusMessage);
        if($auth_response->statusMessage == "SUCCESS")
        {
            return "Enable <b>LDAP Login</b> at the top and then Logout from your Drupal site and login again with your LDAP credentials.";exit;
        }
        else if($auth_response->statusMessage =="USER_NOT_EXIST")
        {
            return "The user you entered does not exist in the Active Directory. Please check your configurations or contact the administrator";exit;
        }
        else if($auth_response->statusMessage =="Test_Connection_was_successful")
        {
            return "Your test connection was successful";
        }
        else
        {
            drupal_set_message("Invalid Password. Please check your password and try again.","error"); return;
        }
    }
}

function ldap_login($username, $password) {
    $auth_response = new Mo_Ldap_Auth_Response();
    $username = stripcslashes($username);
    if(empty($username))
    {
        MiniorangeLdapUtility::addLogger('L18: Empty Username or Password');
        drupal_set_message("Username can not be empty","error");
        return $auth_response;
    }
    if(empty($password))
    {
        MiniorangeLdapUtility::addLogger('L18: Empty Username or Password');
        return $auth_response;
    }

    $password = stripcslashes($password);
    $authStatus = null;
    $ldapconn = getConnection();

    MiniorangeLdapUtility::addLogger('L19: Anonymous LDAP Bind: ',$ldapconn);

    if ($ldapconn) {
        MiniorangeLdapUtility::addLogger('L20: Entered ldap_auth.module:ldapconn ');
        $search_filter = variable_get('miniorange_ldap_username_attribute');
        $value_filter = '(&(objectClass=*)(' . $search_filter . '=?))';
        $search_bases = variable_get('miniorange_ldap_search_base','');

        $ldap_bind_dn = variable_get('miniorange_ldap_server_account_username','');
        $ldap_bind_password = variable_get('miniorange_ldap_server_account_password','');
        $filter = str_replace('?', $username, $value_filter);
        $user_search_result = null;
        $entry = null;
        $info = null;

        $bind = @ldap_bind($ldapconn, $ldap_bind_dn, $ldap_bind_password);
        $err = ldap_error($ldapconn);

        MiniorangeLdapUtility::addLogger('L21: ldap_auth.module ldap_error: ',$err);
        if(strtolower($err) != 'success'){
            MiniorangeLdapUtility::addLogger('L22: ldap_auth.module strtolower(err) not success: ');
            $auth_response = new Mo_Ldap_Auth_Response();
            $auth_response->status = false;
            $auth_response->statusMessage = 'LDAP_NOT_RESPONDING';
            $auth_response->userDn = '';
            return $auth_response;
        }

        else if (isset($_COOKIE['Drupal_visitor_mo_ldap_test']) && ($_COOKIE['Drupal_visitor_mo_ldap_test'] == true))
        {
            MiniorangeLdapUtility::addLogger('L23: Drupal_visitor_mo_ldap_test found and set to true ');
            $auth_response = new Mo_Ldap_Auth_Response();
            $auth_response->status = true;
            $auth_response->statusMessage = 'Test_Connection_was_successful';
            $auth_response->userDn = '';
            return $auth_response;

        }

        $s1 = @ldap_search($ldapconn, $search_bases, $filter);
        MiniorangeLdapUtility::addLogger('L24: ldap_auth.module login flow: ' );
        if(@ldap_search($ldapconn, $search_bases, $filter))
        {
            $user_search_result = ldap_search($ldapconn, $search_bases, $filter);
            MiniorangeLdapUtility::addLogger('L25: ldap_auth.module ldap search: ',$user_search_result);
        }
        else{
            MiniorangeLdapUtility::addLogger('L26: ldap_auth.module User NOT Exist: ');
            $err = ldap_error($ldapconn);
            $auth_response = new Mo_Ldap_Auth_Response();
            $auth_response->status = false;
            $auth_response->statusMessage = 'USER_NOT_EXIST';
            $auth_response->userDn = '';
            return $auth_response;
        }

        $info = ldap_first_entry($ldapconn, $user_search_result);
        $entry = ldap_get_entries($ldapconn, $user_search_result);
        MiniorangeLdapUtility::addLogger('L27: ldap_auth.module ldap_first_entry: ',$info);

        if($info){
            $userDn = ldap_get_dn($ldapconn, $info);
            MiniorangeLdapUtility::addLogger('L28: ldap_auth.module userDn: ',$userDn);
        }
        else{
            MiniorangeLdapUtility::addLogger('L29: ldap_auth.module User Not Found ');
            $auth_response = new Mo_Ldap_Auth_Response();
            $auth_response->status = false;
            $auth_response->statusMessage = 'USER_NOT_EXIST';
            $auth_response->userDn = '';
            return $auth_response;
        }

        MiniorangeLdapUtility::addLogger('L31: ldap_auth.module authenticate_response status message Bind: ',$auth_response->statusMessage);
        $authentication_response = authenticate($userDn, $password);

        if($authentication_response->statusMessage == 'SUCCESS'){
            $profile_attributes = array();
            $email_attribute = variable_get('miniorange_ldap_email_attribute');
            if(!empty($email_attribute)){
                if(isset($entry[0][$email_attribute]) && is_array($entry[0][$email_attribute]))
                    $profile_attributes['mail'] = $entry[0][$email_attribute][0];
                else
                    $profile_attributes['mail'] = isset($entry[0][$email_attribute]) ? $entry[0][$email_attribute] : '';
            }

            $authentication_response->profileAttributesList = $profile_attributes;
        }
        MiniorangeLdapUtility::addLogger('L32: ldap_auth.module authenticate_response status message not SUCCESS ');
        return $authentication_response;

    }
    else{
        MiniorangeLdapUtility::addLogger('L33: ldap_auth.module ldapconn if failed');
        $auth_response = new Mo_Ldap_Auth_Response();
        $auth_response->status = false;
        $auth_response->statusMessage = 'ERROR';
        $auth_response->userDn = '';
        return $auth_response;
    }

}

function getConnection() {
    $server_name = variable_get('miniorange_ldap_server');
    $ldaprdn = variable_get('miniorange_ldap_server_account_username');
    $ldappass = variable_get('miniorange_ldap_server_account_password');
    $ldapconn = ldap_connect($server_name);
    if ( version_compare(PHP_VERSION, '5.3.0') >= 0 ) {
        ldap_set_option($ldapconn, LDAP_OPT_NETWORK_TIMEOUT, 5);
    }
    ldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3);
    ldap_set_option($ldapconn, LDAP_OPT_REFERRALS, 0);
    return $ldapconn;
}

function authenticate($userDn, $password) {
    $server_name = variable_get('miniorange_ldap_server','');

    $ldapconn = ldap_connect($server_name);
    if ( version_compare(PHP_VERSION, '5.3.0') >= 0 ) {
        ldap_set_option(null, LDAP_OPT_NETWORK_TIMEOUT, 5);
    }

    ldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3);
    ldap_set_option($ldapconn, LDAP_OPT_REFERRALS, 0);
    // binding to ldap server

    $ldapbind = @ldap_bind($ldapconn, $userDn, $password);
    // verify binding
    $search_filter = variable_get('miniorange_ldap_username_attribute');
    $value_filter = '(&(objectClass=*)(' . $search_filter . '=?))';
    $filter = str_replace('?', $userDn, $value_filter);
    MiniorangeLdapUtility::addLogger('L30: LDAPFlow authenticate() Bind: ',$ldapbind);
    if ($ldapbind) {
        $search_result = ldap_search($ldapconn, $userDn,$filter);
        $auth_response = new Mo_Ldap_Auth_Response();
        $auth_response->status = true;
        $auth_response->statusMessage = 'SUCCESS';
        $auth_response->userDn = $userDn;
        return $auth_response;
    }
    $auth_response = new Mo_Ldap_Auth_Response();
    $auth_response->status = false;
    $auth_response->statusMessage = 'ERROR';
    $auth_response->userDn = $userDn;
    return $auth_response;
}

function save_logs_option(array &$form, $form_state){
    $enable_loggers = $form['debug']['loggers']['#value'];
    variable_set('miniorange_ldap_enable_logs',$enable_loggers);
    drupal_set_message('Settings Saved Successfully.');
}

?>